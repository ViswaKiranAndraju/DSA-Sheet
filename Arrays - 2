import java.util.HashMap;

class Main {
    public static int[] twoSum(int n, int []arr, int target) {
        
        // Brute Force Approach TC: O(n^2) SC: O(1)
        int[] ans = new int[2];
        ans[0] = ans[1] = -1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arr[i] + arr[j] == target) {
                    ans[0] = i;
                    ans[1] = j;
                    return ans;
                }
            }
        }
        return ans;

        // Better Approach TC: O(nlogn) SC: O(n)
        int[] ans = new int[2];
        ans[0] = ans[1] = -1;
        HashMap<Integer, Integer> mpp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = arr[i];
            int moreNeeded = target - num;
            if (mpp.containsKey(moreNeeded)) {
                ans[0] = mpp.get(moreNeeded);
                ans[1] = i;
                return ans;
            }

            mpp.put(arr[i], i);
        }
        return ans;

        // Optimal Approach TC: O(nlogn + n) SC: O(1)
        int[] ans = new int[2];
        ans[0] = ans[1] = -1;
        Arrays.sort(arr);
        int l=0,r=n-1;
        while(l<r){
            if(arr[l]+arr[r]==target){
                ans[0]=l;
                ans[1]=r;
            }else if(arr[l]+arr[r]>target){
                r--;
            }else{
                l++;
            }
        }
        return ans;
    }

    public static void sort012(int arr[]){
        // Brute Force Approach TC: O(nlogn) SC: O(1)
        Arrays.sort(arr);
        
        //Better Approach TC: O(2n) SC: O(1)
        int count0=0, count1=0, count2=0;
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                count0++;
            }
            else if(arr[i]==1){
                count1++;
            }else{
                count2++;
            }
        }
        int i=0;
        while(count0>0){
            arr[i]=0;
            count0--;
            i++;
        }
        while(count1>0){
            arr[i]=1;
            count1--;
            i++;
        }
        while(count2>0){
            arr[i]=2;
            count2--;
            i++;
        }

        //Optimal Approach TC: O(n) SC: O(1)
        int low=0;
        int mid=0;
        int high=n-1;
        while(mid<=high){
            if(arr[mid]==0){
                int temp=arr[low];
                arr[low]=arr[mid];
                arr[mid]=temp;
                low++;
                mid++;
            }else if(arr[mid]==1){
                mid++;
            }else{
                int temp=arr[mid];
                arr[mid]=arr[high];
                arr[high]=temp;
                high--;
            }
        }

    }

    public static int majorityElement(int arr[]){
        int n=arr.length;

        // Brute Force Approach TC: O(n^2) SC: O(1)
        for(int i=0;i<n;i++){
            int num=arr[i];
            int count=0;
            for(int j=0;j<n;j++){
                if(num==arr[j]){
                    count++;
                }
            }
            if(count>n/2) return num;
        }
        return -1;

        // Better Approach TC: O(nlogn) SC: O(n)
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            int freq = map.getOrDefault(map.get(arr[i]), 0);
            map.put(arr[i],freq+1);
        }
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            if(entry.getValue()>n/2){
                return entry.getKey();
            }
        }
        return -1;

        // Optimal Approach TC: O(2n) SC: O(1)
        int count=0;
        int num=-1;
        for(int i=0;i<n;i++){
            if(count==0){
                num=arr[i];
                count=1;
            }else if(arr[i]==num){
                count++;
            }else{
                count--;
            }
        }
        count=0;
        for(int i=0;i<n;i++){
            if(num=arr[i]){
                count++;
            }
        }
        if(count>n/2) return num;
        return -1;
    }

    public static int maxSubarraySum(int arr[]){
        int n=arr.length;

        //Brute Force Approach TC: O(n^3) SC: O(1)
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int sum=0;
                for(int k=i;k<=j;k++){
                    sum+=k;
                }
                ans=Math.max(ans,sum);
            }
        }
        return ans;

        // Better Approach TC: O(n^2) SC: O(1)
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
            }
            ans=Math.max(ans,sum);
        }
        return ans;

        //Optimal Approach TC: O(n) SC: O(1)
        int ans=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<n;i++){
            if(sum<0){
                sum=0;
            }
            sum+=arr[i];
            ans=Math.max(ans,sum);
        }
        return ans;

        //Optimal Approach TC: O(n) SC: O(1)
        int ansStart=-1;
        int ansEnd=-1;
        int start = 0;
        int ans=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<n;i++){
            if(sum==0){
                start=i;
            }
            if(sum<0){
                sum=0;
            }
            sum+=arr[i];
            if(sum>ans){
                ans=sum;
                ansStart=start;
                ansEnd=i;
            }
        }
        System.out.println(ansStart+" "+ansEnd);
    }

    public static int stockBuySell(int arr[]){
        int n=arr.length;

        //Brute force Approach TC: O(n^2) SC: O(1)
        int maxProfit=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[j]>arr[i]){
                    profit=Math.max(profit,arr[j]-arr[i]);
                }
            }
        }
        return maxProfit;

        //Optimal Approach TC: O(n) SC: O(1)
        int maxProfit=0;
        int minSoFar=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            minSoFar=Math.min(minSoFar,arr[i]);
            profit=Math.max(profit,arr[i]-minSoFar);
        }
        return maxProfit;
    }

    public static int[] rearrangeElements(int arr[]){
        int n=arr.length;

        //Brute Force Approach TC: O(n+n/2) SC: O(n)
        int pos[] = new int[n/2];
        int neg[] = new int[n/2];
        int j=0;
        for(int i=0;i<n;i++){
            if(arr[i]>0){
                pos[j++]=arr[i];
            }else{
                neg[j++]=arr[i];
            }
        }
        for(int i=0;i<n/2;i++){
            arr[2*i]=pos[i];
            arr[2*i+1]=neg[i];
        }
        return arr;

        //Optimal Approach TC: O(n) SC: O(n)
        int ans[] = new int[n];
        int pS=0;
        int nS=1;
        for(int i=0;i<n;i++){
            if(arr[i]>0){
                ans[pS]=arr[i];
                pS+=2;
            }else{
                ans[nS]=arr[i];
                nS+=2;
            }
        }
        return ans;
    }
}
